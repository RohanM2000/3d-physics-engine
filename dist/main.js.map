{"version":3,"file":"main.js","mappings":"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","sources":["webpack://3d_physics_engine/./src/scripts/matrix.js","webpack://3d_physics_engine/./src/scripts/rotations.js","webpack://3d_physics_engine/./src/scripts/vertex.js","webpack://3d_physics_engine/./src/scripts/floor.js","webpack://3d_physics_engine/./src/scripts/objects.js","webpack://3d_physics_engine/./src/scripts/cube.js","webpack://3d_physics_engine/./src/scripts/constants.js","webpack://3d_physics_engine/./src/scripts/vertextwo.js","webpack://3d_physics_engine/./src/scripts/render.js","webpack://3d_physics_engine/./src/scripts/camera.js","webpack://3d_physics_engine/./src/scripts/scene.js","webpack://3d_physics_engine/./src/scripts/background.js","webpack://3d_physics_engine/./src/scripts/pyramid.js","webpack://3d_physics_engine/./src/index.js","webpack://3d_physics_engine/./src/scripts/throttle_debounce.js"],"sourcesContent":["export default function Matrix (mat) {\n    this.values = mat;\n    this.lengthI = mat.length;\n    this.lengthJ = mat[0].length;\n}\n\nMatrix.prototype.multiply = function (matrix) {\n    const result = [];\n    for (let i = 0; i < this.lengthI; i++) {\n        const row = [];\n        for (let j = 0; j < matrix.lengthJ; j++) {\n            let sum = 0;\n            for (let k = 0; k < this.lengthJ; k++ ) {\n                sum += this.values[i][k] * matrix.values[k][j];\n            }\n            row.push(sum);\n        }\n        result.push(row);\n    }\n    return new Matrix(result);\n}\n\nMatrix.prototype.simplifyZeros = function () {\n    for (let i = 0; i < this.lengthI; i++) {\n        for (let j = 0; j < this.lengthJ; j++) {\n            if (Math.abs(this.values[i][j]) < 0.001) this.values[i][j] = 0;\n        }\n    }\n}\n\nMatrix.prototype.dupe = function() {\n    const mat = [];\n    // console.log(this);\n    for (let i = 0; i < this.lengthI; i++) {\n        // console.log(\"getting to this point!\")\n        mat.push(this.values[i].slice());\n        // console.log(mat);\n    }\n    return new Matrix(mat);\n}","import Matrix from \"./matrix.js\"\nexport function rotationX (radians) {\n    return new Matrix([\n        [1, 0, 0],\n        [0, Math.cos(radians), -Math.sin(radians)],\n        [0, Math.sin(radians), Math.cos(radians)]\n    ]);\n}\n\nexport function rotationY (radians) {\n    return new Matrix([\n        [Math.cos(radians), 0, Math.sin(radians)],\n        [0, 1, 0],\n        [-Math.sin(radians), 0, Math.cos(radians)]\n    ]);\n}\n\nexport function rotationZ (radians) {\n    return new Matrix([\n        [Math.cos(radians), -Math.sin(radians), 0],\n        [Math.sin(radians), Math.cos(radians), 0],\n        [0, 0, 1]\n    ]);\n}","import Matrix from \"./matrix.js\"\nimport * as ROTATIONS from \"./rotations.js\"\nexport default function Vertex (x, y, z) {\n    this.x = parseFloat(x);\n    this.y = parseFloat(y);\n    this.z = parseFloat(z);\n}\n\nVertex.prototype.move = function (x, y, z) {\n    this.x += x;\n    this.y += y;\n    this.z += z;\n}\n\nVertex.prototype.rotateX = function (theta) {\n    const rotMat = ROTATIONS.rotationX(theta);\n\n    const oldPos = new Matrix([\n        [this.x],\n        [this.y],\n        [this.z]\n    ])\n\n    const newPos = rotMat.multiply(oldPos);\n\n    this.x = newPos.values[0][0];\n    this.y = newPos.values[1][0];\n    this.z = newPos.values[2][0];\n}\n\nVertex.prototype.rotateY = function (theta) {\n    const rotMat = ROTATIONS.rotationY(theta);\n\n    const oldPos = new Matrix([\n        [this.x],\n        [this.y],\n        [this.z]\n    ])\n\n    const newPos = rotMat.multiply(oldPos);\n\n    this.x = newPos.values[0][0];\n    this.y = newPos.values[1][0];\n    this.z = newPos.values[2][0];\n}\n\nVertex.prototype.rotateZ = function (theta) {\n    const rotMat = ROTATIONS.rotationZ(theta);\n\n    const oldPos = new Matrix([\n        [this.x],\n        [this.y],\n        [this.z]\n    ])\n\n    const newPos = rotMat.multiply(oldPos);\n\n    this.x = newPos.values[0][0];\n    this.y = newPos.values[1][0];\n    this.z = newPos.values[2][0];\n}\n\nVertex.prototype.multiplyBy = function (matrix) {\n    const newVals = matrix.multiply(new Matrix([\n        [this.x],\n        [this.y],\n        [this.z]\n    ]));\n    // console.log(\"getting to this point\");\n    // console.log(newVals)\n    return new Vertex(newVals.values[0][0], newVals.values[1][0], newVals.values[2][0]);\n}\n\nVertex.prototype.dupe = function () {\n    return new Vertex(this.x, this.y, this.z);\n}","import Vertex from \"./vertex.js\";\nimport Objects from \"./objects.js\";\nimport Matrix from \"./matrix.js\";\nexport default function Floor () {\n    this.center = new Vertex(-350, 400, -1000);\n    this.velocity = new Vertex(0, 0, 0);\n    this.size = 0;\n    this.rotations = new Matrix([\n        [1,0,0],\n        [0,1,0],\n        [0,0,1]\n    ]);\n    this.vertices = [\n        new Vertex(this.center.x + 50, this.center.y - 50, this.center.z),\n        new Vertex(this.center.x + 50, this.center.y + 50, this.center.z),\n        new Vertex(this.center.x - 50, this.center.y + 50, this.center.z),\n        new Vertex(this.center.x - 50, this.center.y - 50, this.center.z),\n    ];\n    this.faces = [\n        [this.vertices[0], this.vertices[1], this.vertices[2], this.vertices[3], \"black\"]\n    ];\n}\n\nfunction Surrogate () {\n\n};\n\nSurrogate.prototype = Objects.prototype;\n\nFloor.prototype = new Surrogate();\n\nFloor.prototype.dupe = function () {\n    const result = new Floor();\n    result.center = this.center.dupe();\n    // console.log(this.center.dupe());\n    result.rotations = this.rotations.dupe();\n    for (let i = 0; i < result.vertices.length; i++) {\n        result.vertices[i] = this.vertices[i].dupe();\n    }\n    // console.log(result);\n    this.fixFaces();\n    return result;\n};\n\nFloor.prototype.fixFaces = function () {\n    this.faces = [\n        [this.vertices[0], this.vertices[1], this.vertices[2], this.vertices[3], \"black\"]\n    ];\n};\n\nFloor.prototype.fall = function () {\n};\n\nFloor.prototype.jump = function () {\n};","import * as ROTATIONS from \"./rotations.js\"\nimport Matrix from \"./matrix.js\"\nimport Floor from \"./floor.js\"\nexport default function Objects () {\n\n}\n\nObjects.prototype.move = function (x, y, z) {\n    this.center.move(x, y, z);\n    for (let i = 0; i < this.vertices.length; i++) {\n        const vertex = this.vertices[i];\n        vertex.move(x, y, z);\n    }\n    // if (this instanceof Floor) {\n    //     console.log(this);\n    // }\n}\n\n\nObjects.prototype.absRotateX = function (theta) {\n    // const rotMatrix = ROTATIONS.rotationX(theta);\n    // const centMat = new Matrix([\n    //     [this.center.x],\n    //     [this.center.y],\n    //     [this.center.z]\n    // ]);\n    // const newCent = rotMatrix.multiply(centMat);\n    // this.center.x = newCent.values[0][0];\n    // this.center.y = newCent.values[1][0];\n    // this.center.z = newCent.values[2][0];\n    this.rotateX(theta);\n    this.center.rotateX(theta);\n    // this.velocity.rotateX(theta);\n    for (let i = 0; i < this.vertices.length; i++) {\n        // const oldPosMat = new Matrix([\n        //     [this.vertices[i].x],\n        //     [this.vertices[i].y],\n        //     [this.vertices[i].z]\n        // ]);\n        // const newPosMat = rotMatrix.multiply(oldPosMat);\n        // // [this.vertices[i].x, this.vertices[i].y, this.vertices[i].z] = newPosMat.values;\n        // this.vertices[i].x = newPosMat.values[0][0];\n        // this.vertices[i].y = newPosMat.values[1][0];\n        // this.vertices[i].z = newPosMat.values[2][0];\n        this.vertices[i].rotateX(theta);\n    }\n}\n\nObjects.prototype.absRotateY = function (theta) {\n    // const rotMatrix = ROTATIONS.rotationY(theta);\n    // const centMat = new Matrix([\n    //     [this.center.x],\n    //     [this.center.y],\n    //     [this.center.z]\n    // ]);\n    // const newCent = rotMatrix.multiply(centMat);\n    // this.center.x = newCent.values[0][0];\n    // this.center.y = newCent.values[1][0];\n    // this.center.z = newCent.values[2][0];\n    this.rotateY(theta);\n    this.center.rotateY(theta);\n    // this.velocity.rotateY(theta);\n    for (let i = 0; i < this.vertices.length; i++) {\n        // const oldPosMat = new Matrix([\n        //     [this.vertices[i].x],\n        //     [this.vertices[i].y],\n        //     [this.vertices[i].z]\n        // ]);\n        // const newPosMat = rotMatrix.multiply(oldPosMat);\n        // // [this.vertices[i].x, this.vertices[i].y, this.vertices[i].z] = newPosMat.values;\n        // this.vertices[i].x = newPosMat.values[0][0];\n        // this.vertices[i].y = newPosMat.values[1][0];\n        // this.vertices[i].z = newPosMat.values[2][0];\n        this.vertices[i].rotateY(theta);\n    }\n}\n\nObjects.prototype.absRotateZ = function (theta) {\n    // const rotMatrix = ROTATIONS.rotationZ(theta);\n    // const centMat = new Matrix([\n    //     [this.center.x],\n    //     [this.center.y],\n    //     [this.center.z]\n    // ]);\n    // const newCent = rotMatrix.multiply(centMat);\n    // this.center.x = newCent.values[0][0];\n    // this.center.y = newCent.values[1][0];\n    // this.center.z = newCent.values[2][0];\n    this.rotateZ(theta);\n    this.center.rotateZ(theta);\n    // this.velocity.rotateZ(theta);\n    for (let i = 0; i < this.vertices.length; i++) {\n        // const oldPosMat = new Matrix([\n        //     [this.vertices[i].x],\n        //     [this.vertices[i].y],\n        //     [this.vertices[i].z]\n        // ]);\n        // const newPosMat = rotMatrix.multiply(oldPosMat);\n        // // [this.vertices[i].x, this.vertices[i].y, this.vertices[i].z] = newPosMat.values;\n        // this.vertices[i].x = newPosMat.values[0][0];\n        // this.vertices[i].y = newPosMat.values[1][0];\n        // this.vertices[i].z = newPosMat.values[2][0];\n        this.vertices[i].rotateZ(theta);\n    }\n}\n\n// Objects.prototype.relRotateX = function (theta) {\n//     const rotMatrix = ROTATIONS.rotationX(theta);\n//     for (let i = 0; i < this.relVertices.length; i++) {\n//         const oldPosMat = new Matrix([\n//             [this.relVertices[i].x],\n//             [this.relVertices[i].y],\n//             [this.relVertices[i].z]\n//         ]);\n//         const newPosMat = rotMatrix.multiply(oldPosMat);\n//         [this.relVertices[i].x, this.relVertices[i].y, this.relVertices[i].z] = newPosMat.values;\n//         this.vertices[i].x -= oldPosMat[0];\n//         this.vertices[i].x += newPosMat[0];\n//         this.vertices[i].y -= oldPosMat[1];\n//         this.vertices[i].y += newPosMat[1];\n//         this.vertices[i].z -= oldPosMat[2];\n//         this.vertices[i].z += newPosMat[2];\n//     }\n// }\n// Objects.prototype.relRotateY = function (theta) {\n//     const rotMatrix = ROTATIONS.rotationY(theta);\n//     for (let i = 0; i < this.relVertices.length; i++) {\n//         const oldPosMat = new Matrix([\n//             [this.relVertices[i].x],\n//             [this.relVertices[i].y],\n//             [this.relVertices[i].z]\n//         ]);\n//         const newPosMat = rotMatrix.multiply(oldPosMat);\n//         [this.relVertices[i].x, this.relVertices[i].y, this.relVertices[i].z] = newPosMat.values;\n//     }\n// }\n// Objects.prototype.relRotateZ = function (theta) {\n//     const rotMatrix = ROTATIONS.rotationZ(theta);\n//     for (let i = 0; i < this.relVertices.length; i++) {\n//         const oldPosMat = new Matrix([\n//             [this.relVertices[i].x],\n//             [this.relVertices[i].y],\n//             [this.relVertices[i].z]\n//         ]);\n//         const newPosMat = rotMatrix.multiply(oldPosMat);\n//         [this.relVertices[i].x, this.relVertices[i].y, this.relVertices[i].z] = newPosMat.values;\n//     }\n// }\n\nObjects.prototype.checkCollision = function(obj) {\n    // if (Math.abs(this.center.z - obj.center.z) < (this.size/2 + obj.size/2) && !this.fixed) {\n    //     return \"Z\";\n    // }\n    // return false;\n    if (obj instanceof Floor) {\n        if ((this.center.z - this.size/2) < obj.center.z) {\n            return true;\n        }\n    }\n    if (Math.abs(this.center.z - obj.center.z) < (this.size/2 + obj.size/2)) {\n        if (obj instanceof Floor) {\n        return true;\n        } else {\n            // const right = obj.center.x + obj.size;\n            // const left = obj.center.x - obj.size;\n            // const top = obj.center.y + obj.size;\n            // const bottom = obj.center.y - obj.size;\n\n            // for (let i = 0; i < this.vertices.length; i++) {\n            //     const ele = this.vertices[i];\n            //     if (ele.x > left && ele.x < right && ele.y > bottom && ele.y < top) {\n            //         return true\n            //     }\n            // }\n            if (this.center.x === obj.center.x && this.center.y === obj.center.y) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nObjects.prototype.resolveCollisionZ = function(obj) {\n    if (this instanceof Floor && obj instanceof Floor) {\n        return false;\n    }\n    if (obj instanceof Floor) {\n        // const correction = obj.center.z - (this.center.z - this.size/2);\n        // this.move(0, 0, correction);\n        // this.acceleration = 0;\n        // this.velocity.z = 0;\n        // console.log(this);\n        // console.log(obj);\n        // this.fixed = true;\n        const correction = obj.center.z - (this.center.z - this.size/2);\n        this.move(0, 0, correction);\n        this.velocity.z = 0;\n    } else {\n        if ((this.center.z - this.size/2) > (obj.center.z - obj.size/2)) {\n            const correction = (obj.center.z + obj.size/2) - (this.center.z - this.size/2);\n            this.move(0, 0, correction);\n            this.velocity.z = 0;\n        } else {\n            const correction = (this.center.z + this.size/2) - (obj.center.z - obj.size/2);\n            obj.move(0, 0, correction);\n            obj.velocity.z = 0;\n        }\n    }\n}\n\nObjects.prototype.rotateX = function (theta) {\n    const rotMatrix = ROTATIONS.rotationX(theta);\n    this.rotations = rotMatrix.multiply(this.rotations);\n}\n\nObjects.prototype.rotateY = function (theta) {\n    const rotMatrix = ROTATIONS.rotationY(theta);\n    this.rotations = rotMatrix.multiply(this.rotations);\n}\n\nObjects.prototype.rotateZ = function (theta) {\n    const rotMatrix = ROTATIONS.rotationZ(theta);\n    // console.log(\"rotation matrix\", rotMatrix, \"current rotations\", this.rotations);\n    this.rotations = rotMatrix.multiply(this.rotations);\n}\n\nObjects.prototype.rotate = function () {\n    const dupe = this.dupe();\n    dupe.center = dupe.center.multiplyBy(dupe.rotations);\n    for (let i = 0; i < dupe.vertices.length; i++) {\n        // console.log(\"doing this!\")\n        dupe.vertices[i] = dupe.vertices[i].multiplyBy(dupe.rotations);\n    }\n    dupe.fixFaces();\n    return dupe;\n}\n\nObjects.prototype.jump = function (floorHeight) {\n    let xVel;\n    if (this.staticCenter.x > 0) {\n        xVel = 3;\n    } else {\n        xVel = 2;\n    }\n    let yVel;\n    if (this.staticCenter.y > 750) {\n        yVel = 1.2;\n    }else {\n        yVel = 0.8;\n    }\n    this.velocity.z += 2 + 3 * (this.center.z - floorHeight)/100 * xVel * yVel;\n    // this.velocity.z += this.center.x/10;\n}","import Vertex from \"./vertex.js\"\nimport Objects from \"./objects.js\"\nimport Matrix from \"./matrix.js\"\nimport * as CONSTANTS from \"./constants.js\"\nexport default function Cube (center, size) {\n    this.velocity = new Vertex(0, 0, 0);\n    this.acceleration = new Vertex(0, 0, -CONSTANTS.GRAVITY);\n    this.size = size;\n    const d = size / 2;\n    // this.relVertices = [\n    //     new Vertex(-d, -d, -d),\n    //     new Vertex( d, -d, -d),\n    //     new Vertex( d, -d,  d),\n    //     new Vertex(-d, -d,  d),\n    //     new Vertex( d,  d, -d),\n    //     new Vertex(-d,  d, -d),\n    //     new Vertex(-d,  d,  d),\n    //     new Vertex( d,  d,  d)\n    // ];\n    this.center = center;\n    this.staticCenter = new Vertex(this.center.x, this.center.y, this.center.z);\n    this.rotations = new Matrix([\n        [1,0,0],\n        [0,1,0],\n        [0,0,1]\n    ]);\n    this.vertices = [\n        new Vertex(center.x - d, center.y - d, center.z - d),\n        new Vertex(center.x + d, center.y - d, center.z - d),\n        new Vertex(center.x + d, center.y - d, center.z + d),\n        new Vertex(center.x - d, center.y - d, center.z + d),\n        new Vertex(center.x + d, center.y + d, center.z - d),\n        new Vertex(center.x - d, center.y + d, center.z - d),\n        new Vertex(center.x - d, center.y + d, center.z + d),\n        new Vertex(center.x + d, center.y + d, center.z + d)\n    ];\n    this.faces = [\n        [this.vertices[0], this.vertices[1], this.vertices[2], this.vertices[3], \"red\"],\n        [this.vertices[4], this.vertices[5], this.vertices[6], this.vertices[7], \"blue\"],\n        [this.vertices[1], this.vertices[4], this.vertices[7], this.vertices[2], \"green\"],\n        [this.vertices[5], this.vertices[0], this.vertices[3], this.vertices[6], \"orange\"],\n        [this.vertices[5], this.vertices[4], this.vertices[1], this.vertices[0], \"gray\"],\n        [this.vertices[3], this.vertices[2], this.vertices[7], this.vertices[6], \"purple\"]\n    ];\n}\n\nfunction Surrogate () {};\nSurrogate.prototype = Objects.prototype;\nCube.prototype = new Surrogate();\n\nCube.prototype.fall = function() {\n    this.velocity.move(this.acceleration.x, this.acceleration.y, this.acceleration.z);\n    // this.velocity.x -= zDir.x * CONSTANTS.GRAVITY;\n    // this.velocity.y -= zDir.y * CONSTANTS.GRAVITY;\n    // this.velocity.z -= zDir.z * CONSTANTS.GRAVITY;\n\n    this.move(this.velocity.x, this.velocity.y, this.velocity.z);\n}\n\nCube.prototype.dupe = function() {\n    const result = new Cube(this.center, this.size);\n    result.rotations = this.rotations.dupe();\n    for (let i = 0; i < 0; i++) {\n        result.vertices[i] = this.vertices[i].dupe();\n    }\n    // result.faces = [\n    //     [result.vertices[0], result.vertices[1], result.vertices[2], result.vertices[3], \"red\"],\n    //     [result.vertices[4], result.vertices[5], result.vertices[6], result.vertices[7], \"blue\"],\n    //     [result.vertices[1], result.vertices[4], result.vertices[7], result.vertices[2], \"green\"],\n    //     [result.vertices[5], result.vertices[0], result.vertices[3], result.vertices[6], \"orange\"],\n    //     [result.vertices[5], result.vertices[4], result.vertices[1], result.vertices[0], \"gray\"],\n    //     [result.vertices[3], result.vertices[2], result.vertices[7], result.vertices[6], \"purple\"]\n    // ];\n    return result;\n}\n\nCube.prototype.fixFaces = function() {\n    this.faces = [\n        [this.vertices[0], this.vertices[1], this.vertices[2], this.vertices[3], \"red\"],\n        [this.vertices[4], this.vertices[5], this.vertices[6], this.vertices[7], \"blue\"],\n        [this.vertices[1], this.vertices[4], this.vertices[7], this.vertices[2], \"green\"],\n        [this.vertices[5], this.vertices[0], this.vertices[3], this.vertices[6], \"orange\"],\n        [this.vertices[5], this.vertices[4], this.vertices[1], this.vertices[0], \"gray\"],\n        [this.vertices[3], this.vertices[2], this.vertices[7], this.vertices[6], \"purple\"]\n    ];\n}","export const GRAVITY = 0.7;","export default function VertexTwo (x, y) {\n    this.x = parseFloat(x);\n    this.z = parseFloat(y);\n}","import VertexTwo from \"./vertextwo.js\"\nimport Floor from \"./floor.js\"\nfunction OrthoProject (M) {\n    return new VertexTwo(M.x, M.z);\n}\n\nfunction ProtoProject (M, d) {\n    return new VertexTwo(d * M.x / (M.y + d),d * M.z / (M.y + d));\n}\n\nfunction painterQuickSort (objects) {\n    if (objects.length <= 1) {\n        return objects;\n    }\n    const left = [];\n    const right = [];\n    const ob = objects[0];\n    // let tempMin = ob.vertices[0].y;\n    // for (let i = 1; i < ob.vertices.length; i++) {\n    //     if (ob.vertices[i] < tempMin) {\n    //         tempMin = ob.vertices[i];\n    //     }\n    // }\n    const mid = [ob];\n    for (let i = 1; i < objects.length; i++) {\n        const element = objects[i];\n        if (element.center.y < ob.center.y) {\n            right.push(element);\n        // } else if (element.center.y > ob.center.y){\n        } else {\n            left.push(element);\n        }\n        // } else {\n        //     let potentialMin = element.vertices[0];\n        //     for (let j = 0; j < element.vertices.length; j++) {\n        //         if (element.vertices[j] < potentialMin) {\n        //             potentialMin = element.vertices[j];\n        //         }\n        //     }\n            \n        //     if (potentialMin < tempMin) {\n        //         right.push(element);\n        //     } else {\n        //         left.push(element);\n        //     }\n        // }\n    }\n    const sortedLeft = painterQuickSort(left);\n    const sortedRight = painterQuickSort(right);\n\n    const newObjects = sortedLeft.concat(mid).concat(sortedRight);\n    return newObjects;\n}\n\n\n\nexport default function render(objects, ctx, distX, distY, d) {\n    const rotatedObjects = [];\n    for (let i = 0; i < objects.length; i++) {\n        rotatedObjects.push(objects[i].rotate());\n    }\n    // console.log(objects, rotatedObjects);\n    // console.log(rotatedObjects[2]);\n    // console.log(objects[2], rotatedObjects[2]);\n    const sortedObjects = painterQuickSort(rotatedObjects);\n    // console.log(sortedObjects);\n    for (let i = 0; i < sortedObjects.length; i++) {\n        // if (sortedObjects[i] instanceof Floor) {\n        //     console.log(sortedObjects[i]);\n        // }\n        // const sortedFaces = painterQuickSort(sortedObjects[i].faces);\n        if (sortedObjects[i].center.y > 100) {\n\n            const sortedFaces = sortedObjects[i].faces;\n            // console.log(sortedFaces);\n            for (let j = 0; j < sortedFaces.length; j++) {\n                const face = sortedFaces[j];\n                const avg = [0, 0];\n                const p = ProtoProject(face[0], d);\n                avg[0] += p.x;\n                avg[1] += p.z;\n                ctx.beginPath();\n                ctx.moveTo(p.x + distX, distY - p.z);\n                \n                for (let k = 1; k < face.length - 1; k++) {\n                    const p = ProtoProject(face[k], d);\n                    avg[0] += p.x;\n                    avg[1] += p.z;\n                    ctx.lineTo(p.x + distX, distY - p.z);\n                }\n                ctx.fillStyle = face[face.length - 1];\n                ctx.closePath();\n                \n                avg[0] = avg[0] / (face.length - 1);\n                avg[1] = avg[1] / (face.length - 1);\n                \n                \n                const r = ProtoProject(face[0], d);\n                const q = ProtoProject(face[1], d);\n                \n                const a = [r.x - avg[0], r.z - avg[1]];\n                const b = [q.x - avg[0], q.z - avg[1]];\n                \n                \n                if (a[0] *b[1] > a[1] *b[0]) {\n                    // console.log(face, sortedObjects[i].center, a, b);\n                    ctx.stroke();\n                    ctx.fill();\n                }\n                \n            }\n        }\n    }\n}\n\n","export default function OrthoCamera (position, zTheta = 0, zPhi = 0, zOmega = 0) {\n    this.position = position;\n    this.zTheta = zTheta;\n    this.zPhi = zPhi;\n    this.zOmega = zOmega;\n}\n\nOrthoCamera.prototype.move = function(x, y, z) {\n    this.position.x += x;\n    this.position.y += y;\n    this.position.z += z;\n}\n\nOrthoCamera.prototype.turn = function(zTheta) {\n    this.zTheta += zTheta;\n}\n\nOrthoCamera.prototype.dip = function(zPhi) {\n    this.zPhi -= zPhi;\n}\n\nOrthoCamera.prototype.screw = function(zOmega) {\n    this.zOmega += zOmega;\n}\n","import Objects from \"./objects.js\"\nimport Camera from \"./camera.js\"\nimport Vertex from \"./vertex.js\"\n\nexport default function Scene (camera, objects, background) {\n    this.camera = camera;\n    this.objects = objects;\n    this.background = background;\n    this.x = new Vertex(1,0,0);\n    this.y = new Vertex(0,1,0);\n    this.z = new Vertex(0,0,1);\n}\n\nScene.prototype.turn = function (zTheta) {\n    this.camera.turn(zTheta);\n    for (let i = 0; i < this.objects.length; i++) {\n        const element = this.objects[i];\n        // element.absRotateZ(-zTheta);\n        element.rotateZ(-zTheta);\n    }\n    // this.background.absRotateZ(-zTheta);\n    this.x.rotateZ(-zTheta);\n    this.y.rotateZ(-zTheta);\n    this.z.rotateZ(-zTheta);\n}\n\nScene.prototype.dip = function (zPhi) {\n    this.camera.dip(zPhi)\n    for (let i = 0; i < this.objects.length; i++) {\n        const element = this.objects[i];\n        // element.absRotateX(zPhi);\n        element.rotateX(zPhi);\n    }\n    // this.background.absRotateX(zPhi);\n    this.x.rotateX(zPhi);\n    this.y.rotateX(zPhi);\n    this.z.rotateX(zPhi);\n}\n\nScene.prototype.screw = function (zOmega) {\n    this.camera.dip(zOmega)\n    for (let i = 0; i < this.objects.length; i++) {\n        const element = this.objects[i];\n        // element.absRotateY(-zOmega);\n        element.rotateY(-zOmega);\n    }\n    // this.background.absRotateY(-zOmega);\n    this.x.rotateY(-zOmega);\n    this.y.rotateY(-zOmega);\n    this.z.rotateY(-zOmega);\n}\n\nScene.prototype.move = function (x, y, z) {\n    this.camera.move(x, y, z);\n    for (let i = 0; i < this.objects.length; i++) {\n        const element = this.objects[i];\n        element.move(-x, -y, -z);\n    }\n    // this.background.move(-x, -y, -z);\n}\n\nScene.prototype.fall = function () {\n    for (let i = 0; i < this.objects.length; i++) {\n        const obj = this.objects[i];\n        obj.fall();\n    }\n    for (let i = 0; i < this.objects.length - 1; i++) {\n        for (let j = i+1; j < this.objects.length; j++) {\n            if (this.objects[i].checkCollision(this.objects[j])) {\n                this.objects[i].resolveCollisionZ(this.objects[j]);\n            }\n        }\n    }\n}\n\nScene.prototype.jump = function (floorHeight) {\n    for (let i = 0; i < this.objects.length; i++) {\n        this.objects[i].jump(floorHeight);\n    }\n}","import Vertex from \"./vertex.js\";\nimport Objects from \"./objects.js\";\nimport Matrix from \"./matrix.js\";\nexport default function Background () {\n    this.center = new Vertex(0, 0, 0);\n    this.vertices = [\n        new Vertex(-5000, -5000, -5000),\n        new Vertex(5000, -5000, -5000),\n        new Vertex(5000, -5000, 5000),\n        new Vertex(-5000, -5000, 5000),\n        new Vertex(5000, 5000, -5000),\n        new Vertex(-5000, 5000, -5000),\n        new Vertex(-5000, 5000, 5000),\n        new Vertex(5000, 5000, 5000)\n    ];\n    this.rotations = new Matrix([\n        [1,0,0],\n        [0,1,0],\n        [0,0,1]\n    ])\n    this.faces = [\n        [this.vertices[0], this.vertices[1], this.vertices[2], this.vertices[3], \"gray\"],\n        [this.vertices[4], this.vertices[5], this.vertices[6], this.vertices[7], \"gray\"],\n        [this.vertices[1], this.vertices[4], this.vertices[7], this.vertices[2], \"lightblue\"],\n        [this.vertices[5], this.vertices[0], this.vertices[3], this.vertices[6], \"lightblue\"],\n        [this.vertices[5], this.vertices[4], this.vertices[1], this.vertices[0], \"black\"],\n        [this.vertices[3], this.vertices[2], this.vertices[7], this.vertices[6], \"black\"]\n    ];\n}\n\nfunction Surrogate () {};\nSurrogate.prototype = Objects.prototype;\nBackground.prototype = new Surrogate();","import Vertex from \"./vertex.js\"\nimport Objects from \"./objects.js\"\nimport Matrix from \"./matrix.js\"\nimport * as CONSTANTS from \"./constants.js\"\nexport default function Pyramid (center, size) {\n    this.velocity = new Vertex(0, 0, 0);\n    this.acceleration = new Vertex(0, 0, -CONSTANTS.GRAVITY);\n    this.size = size;\n    const d = size / 2;\n    // this.relVertices = [\n    //     new Vertex(-d, -d, -d),\n    //     new Vertex( d, -d, -d),\n    //     new Vertex( d, -d,  d),\n    //     new Vertex(-d, -d,  d),\n    //     new Vertex( d,  d, -d),\n    //     new Vertex(-d,  d, -d),\n    //     new Vertex(-d,  d,  d),\n    //     new Vertex( d,  d,  d)\n    // ];\n    this.center = center;\n    this.staticCenter = new Vertex(this.center.x, this.center.y, this.center.z);\n    this.rotations = new Matrix([\n        [1,0,0],\n        [0,1,0],\n        [0,0,1]\n    ]);\n    this.vertices = [\n        new Vertex(center.x - d, center.y - d, center.z - d),\n        new Vertex(center.x + d, center.y - d, center.z - d),\n        new Vertex(center.x + d, center.y + d, center.z - d),\n        new Vertex(center.x - d, center.y + d, center.z - d),\n        new Vertex(center.x, center.y, center.z + d)\n    ];\n    this.faces = [\n        [this.vertices[0], this.vertices[3], this.vertices[2], this.vertices[1], \"red\"],\n        [this.vertices[0], this.vertices[1], this.vertices[4], \"blue\"],\n        [this.vertices[1], this.vertices[2], this.vertices[4], \"green\"],\n        [this.vertices[2], this.vertices[3], this.vertices[4], \"orange\"],\n        [this.vertices[0], this.vertices[4], this.vertices[3], \"gray\"]\n    ];\n}\n\nfunction Surrogate () {};\nSurrogate.prototype = Objects.prototype;\nPyramid.prototype = new Surrogate();\n\nPyramid.prototype.fall = function() {\n    this.velocity.move(this.acceleration.x, this.acceleration.y, this.acceleration.z);\n    // this.velocity.x -= zDir.x * CONSTANTS.GRAVITY;\n    // this.velocity.y -= zDir.y * CONSTANTS.GRAVITY;\n    // this.velocity.z -= zDir.z * CONSTANTS.GRAVITY;\n\n    this.move(this.velocity.x, this.velocity.y, this.velocity.z);\n}\n\nPyramid.prototype.dupe = function() {\n    const result = new Pyramid(this.center, this.size);\n    result.rotations = this.rotations.dupe();\n    for (let i = 0; i < 0; i++) {\n        result.vertices[i] = this.vertices[i].dupe();\n    }\n    // result.faces = [\n    //     [result.vertices[0], result.vertices[1], result.vertices[2], result.vertices[3], \"red\"],\n    //     [result.vertices[4], result.vertices[5], result.vertices[6], result.vertices[7], \"blue\"],\n    //     [result.vertices[1], result.vertices[4], result.vertices[7], result.vertices[2], \"green\"],\n    //     [result.vertices[5], result.vertices[0], result.vertices[3], result.vertices[6], \"orange\"],\n    //     [result.vertices[5], result.vertices[4], result.vertices[1], result.vertices[0], \"gray\"],\n    //     [result.vertices[3], result.vertices[2], result.vertices[7], result.vertices[6], \"purple\"]\n    // ];\n    return result;\n}\n\nPyramid.prototype.fixFaces = function() {\n    this.faces = [\n        [this.vertices[0], this.vertices[3], this.vertices[2], this.vertices[1], \"red\"],\n        [this.vertices[0], this.vertices[1], this.vertices[4], \"blue\"],\n        [this.vertices[1], this.vertices[2], this.vertices[4], \"green\"],\n        [this.vertices[2], this.vertices[3], this.vertices[4], \"orange\"],\n        [this.vertices[0], this.vertices[4], this.vertices[3], \"gray\"]\n    ];\n}","import Cube from \"./scripts/cube.js\"\nimport render from \"./scripts/render.js\"\nimport Vertex from \"./scripts/vertex.js\"\nimport Scene from \"./scripts/scene.js\"\nimport Camera from \"./scripts/camera.js\"\nimport Background from \"./scripts/background.js\"\nimport { renderBackground } from \"./scripts/render_background.js\"\nimport Floor from \"./scripts/floor.js\"\nimport Matrix from \"./scripts/matrix.js\"\nimport Pyramid from \"./scripts/pyramid.js\"\nimport * as TB from \"./scripts/throttle_debounce.js\"\n\ndocument.addEventListener(\"DOMContentLoaded\", (event) => {\n    // const canvas = document.createElement(\"canvas\");\n    // canvas.width = 600;\n    // canvas.height = 600;\n    // document.body.appendChild(canvas);\n    const canvas = document.getElementById(\"3d-canvas\")\n    const ctx = canvas.getContext(\"2d\");\n    \n    const cube = new Cube(new Vertex(50,500,-100), 100);\n    const cube2 = new Cube(new Vertex(-50,500,-200), 100);\n    const pyramid = new Pyramid(new Vertex(-50, 500, 400), 100);\n    const cube3 = new Cube(new Vertex(50, 500, 300), 100);\n    const background = new Background();\n    const floor = new Floor();\n    const floor2 = new Floor();\n    floor2.move(0, 100, 0);\n    const floor3 = new Floor();\n    floor3.move(0, 200, 0);\n    const floor4 = new Floor();\n    floor4.move(0, 300, 0);\n\n    const objs = []\n    const floors = []\n    // const cube2 = new Cube(new Vertex(100,100,100), 100);\n\n    // cube.relRotateX(Math.PI/4);\n    // render([cube], ctx,  300, 300);\n    const camera = new Camera(new Vertex(0, 0, 0), 0);\n    const scene = new Scene(camera, objs.concat(floors), background);\n    function animate () {\n        requestAnimationFrame(animate);\n        \n        ctx.clearRect(0, 0, 600, 600);\n        ctx.fillStyle = \"lightblue\";\n        ctx.fillRect(0, 0, 600, 600);\n        // cube.relRotateX(0.1);\n        // cube.relRotateY(0.1);\n        // cube.relRotateZ(0.1);\n        // scene.turn(0.1);\n        // cube.absRotateY(0.1);\n        // renderBackground(background, ctx, 300, 300, 10000);\n        // cube.fall();\n        // cube3.fall();\n        scene.fall();\n        render(floors, ctx, 300, 300, 200);\n        render(objs, ctx, 300, 300, 200);\n    }\n    document.addEventListener(\"keydown\", (event)=>{\n        // console.log(cube.center);\n        // console.log(cube2.center);\n        // console.log(cube.vertices);\n        // console.log(cube2.vertices);\n        if (event.key === \"a\") {\n            scene.turn(0.2);\n        }\n        if (event.key === \"d\") {\n            scene.turn(-0.2);\n        }\n        if (event.key === \"w\") {\n            scene.dip(-0.2);\n        }\n        if (event.key === \"s\") {\n            scene.dip(0.2);\n        }\n        if (event.key === \"q\") {\n            scene.screw(-0.2);\n        }\n        if (event.key === \"e\") {\n            scene.screw(0.2);\n        }\n        // console.log(event.key);\n        if (event.key === \"ArrowUp\") {\n            scene.move(0, 0, 10);\n        }\n        if (event.key === \"ArrowDown\") {\n            scene.move(0, 0, -10);\n        }\n        if (event.key === \"ArrowLeft\") {\n            scene.move(-10, 0, 0);\n        }\n        if (event.key === \"ArrowRight\") {\n            scene.move(10, 0, 0);\n        }\n        if (event.key === \"r\") {\n            scene.move(0, 10, 0);\n        }\n        if (event.key === \"f\") {\n            scene.move(0, -10, 0);\n        }\n        if (event.key === \"o\") {\n            scene.jump();\n        }\n        // console.log(cube3.rotate(), cube.rotate());\n        \n        // animate();\n        // console.log(cube.center, cube.rotations.multiply(new Matrix([\n            //     [cube.staticCenter.x],\n            //     [cube.staticCenter.y],\n            //     [cube.staticCenter.z]\n        // ])), cube.rotate().center, cube.center.multiplyBy(cube.rotations));\n        // console.log(cube.faces, cube.rotate().faces, \"faces\");\n        // console.log(cube.vertices, cube.rotate().vertices, \"faces\");\n        // console.log(floor);\n    });\n    const shake = document.getElementById(\"shake\");\n    shake.addEventListener(\"click\", (event)=> {\n        scene.jump(floor.center.z);\n    });\n    const answers = document.querySelector(\"div.answers\");\n    const proj = document.getElementById(\"proj\");\n    \n    function questionButton(ele) {\n        const children = answers.children;\n        \n        for (let i = 0; i < children.length; i++) {\n            children[i].remove();\n        }\n\n        answers.appendChild(ele);\n    }\n    \n    const throttleButton = TB.myThrottle(questionButton, 2000);\n    \n    proj.addEventListener(\"click\", (event)=> {\n        const ele = document.createElement(\"p\");\n        ele.innerText = \"Projections are mappings of 3d objects to a 2d plane. Think of the shadow of a cube. As you rotate that cube, the shadow will change as well. That is the principle that drives 3d engines.\";\n        // answers.appendChild(ele);\n        throttleButton(ele);\n    });\n    \n    const rot = document.getElementById(\"rot\");\n    \n    rot.addEventListener(\"click\", (event)=> {\n        const ele = document.createElement(\"p\");\n        ele.innerText = \"Rotations work by leveraging trigonometry to change the positions of vertices on each object, and then rendering from the new positions.\";\n        // answers.appendChild(ele);\n        throttleButton(ele);\n    });\n    \n    const what = document.getElementById(\"what\");\n    \n    what.addEventListener(\"click\", (event)=> {\n        const ele = document.createElement(\"p\");\n        ele.innerText = \"This engine is made with 2d canvas and a simple physics engine made from scratch that considers every object a non-rotational hard body. To read more about the underlying math concepts click me.\";\n        // answers.appendChild(ele);\n        throttleButton(ele);\n    });\n\n    const items = document.querySelector(\"div.add-items\");\n    items.dataset.Shape = \"none\";\n    for (let i = 0; i < 64; i++) {\n        const tempButton = document.createElement(\"button\");\n        tempButton.dataset.Id = i;\n        tempButton.dataset.Finish = \"false\";\n        items.appendChild(tempButton);\n        const floor = new Floor();\n        const row = Math.floor(i / 8);\n        const col = i % 8;\n        \n        floor.move(col* 100, row * 100, 0);\n        \n        floors.push(floor);\n        scene.objects.push(floor);\n        \n    }\n    scene.move(0, 0, -500);\n    scene.move(0, -100, 0);\n    scene.dip(0.2);\n    // console.log(floors);\n    function addObj(tempObj) {\n        objs.push(tempObj);\n        scene.objects.unshift(tempObj);\n    }\n\n    const debObj = TB.myDebounce(addObj, 300);\n    items.addEventListener(\"click\", (event)=> {\n        // console.log(floors);\n        // console.log(event.currentTarget.dataset.Shape);\n        const id = event.target.dataset.Id;\n        // console.log(id);\n        const row = Math.floor(id / 8);\n        const col = id % 8;\n        let newObj;\n        if (event.target.dataset.Finish === \"true\") {\n            alert(\"Cannot place objects on top of pyramid, will cause unstable structure.\");\n        } else {\n            if (event.currentTarget.dataset.Shape === \"cube\") {\n                newObj = new Cube(new Vertex(-350 + 100 * col, 1100 - 100 * row, 1000), 100);\n                newObj.move(-camera.position.x, -camera.position.y, -camera.position.z);\n                newObj.rotations = scene.objects[0].rotations;\n                debObj(newObj);\n            }else if (event.currentTarget.dataset.Shape === \"pyramid\") {\n                // console.log(\"PYRMID STUCK\");\n                newObj = new Pyramid(new Vertex(-350 + 100 * col, 1100 - 100 * row, 1000), 100);\n                newObj.move(-camera.position.x, -camera.position.y, -camera.position.z);\n                newObj.rotations = scene.objects[0].rotations;\n                debObj(newObj);\n\n                event.target.dataset.Finish = \"true\";\n            } else {\n                alert(\"Please select a shape.\");\n            }\n        }\n        // objs.push(newObj);\n        // scene.objects.unshift(newObj);\n        // console.log(newObj);\n        // console.log(floors);\n    });\n\n\n    const cubeButton = document.getElementById(\"cube\");\n    const pyrButton = document.getElementById(\"pyramid\");\n\n    cubeButton.addEventListener(\"click\", (event)=> {\n        // console.log(\"cube\");\n        items.dataset.Shape = \"cube\";\n        cubeButton.classList.add(\"selected\");\n        pyrButton.classList.remove(\"selected\");\n    });\n\n    pyrButton.addEventListener(\"click\", (event)=> {\n        // console.log(\"pyramid\");\n        items.dataset.Shape = \"pyramid\";\n        pyrButton.classList.add(\"selected\");\n        cubeButton.classList.remove(\"selected\");\n    });\n    animate();\n})","export function myThrottle (callback, time) {\n    let able = true;\n    return function (...args) {\n        if (able) {\n            callback(...args);\n            able = false;\n            setTimeout(()=> {\n                able = true;\n            }, time);\n        }\n    }\n}\n\nexport function myDebounce (callback, time) {\n    let able = 0;\n\n    return function (...args) {\n        able +=1;\n\n        setTimeout(()=> {\n            able -=1;\n\n            if (able === 0) {\n                callback(...args);\n            }\n        }, time);\n    }\n}"],"names":["Matrix","mat","this","values","lengthI","length","lengthJ","rotationX","radians","Math","cos","sin","rotationY","rotationZ","Vertex","x","y","z","parseFloat","Floor","center","velocity","size","rotations","vertices","faces","Surrogate","Objects","Cube","acceleration","d","staticCenter","VertexTwo","ProtoProject","M","painterQuickSort","objects","left","right","ob","mid","i","element","push","sortedLeft","sortedRight","concat","render","ctx","distX","distY","rotatedObjects","rotate","sortedObjects","sortedFaces","j","face","avg","p","beginPath","moveTo","k","lineTo","fillStyle","closePath","r","q","a","b","stroke","fill","OrthoCamera","position","zTheta","arguments","undefined","zPhi","zOmega","Scene","camera","background","Background","Pyramid","prototype","multiply","matrix","result","row","sum","simplifyZeros","abs","dupe","slice","move","rotateX","theta","rotMat","ROTATIONS","oldPos","newPos","rotateY","rotateZ","multiplyBy","newVals","fixFaces","fall","jump","absRotateX","absRotateY","absRotateZ","checkCollision","obj","resolveCollisionZ","correction","rotMatrix","floorHeight","xVel","yVel","turn","dip","screw","document","addEventListener","event","getElementById","getContext","floor","objs","floors","Camera","scene","key","answers","querySelector","proj","throttleButton","callback","time","able","ele","children","remove","appendChild","setTimeout","TB","createElement","innerText","items","dataset","Shape","tempButton","Id","Finish","col","debObj","_len","args","Array","_key","tempObj","unshift","id","target","newObj","alert","currentTarget","cubeButton","pyrButton","classList","add","animate","requestAnimationFrame","clearRect","fillRect"],"sourceRoot":""}